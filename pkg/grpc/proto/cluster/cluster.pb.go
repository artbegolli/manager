// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/grpc/proto/cluster/cluster.proto

package cluster

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Cluster struct {
	//Name contains cluster name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//Type contains kubernetes cluster installation type. ex: AWS, GCP
	Cloud string `protobuf:"bytes,2,opt,name=cloud,proto3" json:"cloud,omitempty"`
	//Config contains info to connect to the target cluster
	//This is same as config struct in https://github.com/kubernetes/client-go/blob/master/rest/config.go
	// but have to define it again here with whatever we need
	Config               *Config  `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3be2089bb94235a, []int{0}
}

func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (m *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(m, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetCloud() string {
	if m != nil {
		return m.Cloud
	}
	return ""
}

func (m *Cluster) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

// Config holds the common attributes that can be passed to a Kubernetes client on
// initialization.
// +optional
type Config struct {
	// Host must be a host string, a host:port pair, or a URL to the base of the apiserver.
	// If a URL is given then the (optional) Path of that URL represents a prefix that must
	// be appended to all request URIs used to access the apiserver. This allows a frontend
	// proxy to easily relocate all of the apiserver endpoints.
	Host     string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// password contains basic auth password
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// Server requires Bearer authentication. This client will not attempt to use
	// refresh tokens for an OAuth2 flow.
	// TODO: demonstrate an OAuth2 compatible client.
	BearerToken          string           `protobuf:"bytes,4,opt,name=bearerToken,proto3" json:"bearerToken,omitempty"`
	TlsClientConfig      *TLSClientConfig `protobuf:"bytes,6,opt,name=tlsClientConfig,proto3" json:"tlsClientConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3be2089bb94235a, []int{1}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Config) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Config) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Config) GetBearerToken() string {
	if m != nil {
		return m.BearerToken
	}
	return ""
}

func (m *Config) GetTlsClientConfig() *TLSClientConfig {
	if m != nil {
		return m.TlsClientConfig
	}
	return nil
}

// TLSClientConfig contains settings to enable transport layer security
type TLSClientConfig struct {
	// Server should be accessed without verifying the TLS certificate. For testing only.
	InSecure bool `protobuf:"varint,1,opt,name=inSecure,proto3" json:"inSecure,omitempty"`
	// ServerName is passed to the server for SNI and is used in the client to check server
	// ceritificates against. If ServerName is empty, the hostname used to contact the
	// server is used.
	ServerName string `protobuf:"bytes,2,opt,name=serverName,proto3" json:"serverName,omitempty"`
	// CertData holds PEM-encoded bytes (typically read from a client certificate file).
	// CertData takes precedence over CertFile
	CertData []byte `protobuf:"bytes,3,opt,name=certData,proto3" json:"certData,omitempty"`
	// KeyData holds PEM-encoded bytes (typically read from a client certificate key file).
	// KeyData takes precedence over KeyFile
	KeyData []byte `protobuf:"bytes,4,opt,name=keyData,proto3" json:"keyData,omitempty"`
	// CAData holds PEM-encoded bytes (typically read from a root certificates bundle).
	// CAData takes precedence over CAFile
	CaData []byte `protobuf:"bytes,5,opt,name=caData,proto3" json:"caData,omitempty"`
	// NextProtos is a list of supported application level protocols, in order of preference.
	// Used to populate tls.Config.NextProtos.
	// To indicate to the server http/1.1 is preferred over http/2, set to ["http/1.1", "h2"] (though the server is free to ignore that preference).
	// To use only http/1.1, set to ["http/1.1"].
	NextProtos           []string `protobuf:"bytes,6,rep,name=nextProtos,proto3" json:"nextProtos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLSClientConfig) Reset()         { *m = TLSClientConfig{} }
func (m *TLSClientConfig) String() string { return proto.CompactTextString(m) }
func (*TLSClientConfig) ProtoMessage()    {}
func (*TLSClientConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3be2089bb94235a, []int{2}
}

func (m *TLSClientConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TLSClientConfig.Unmarshal(m, b)
}
func (m *TLSClientConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TLSClientConfig.Marshal(b, m, deterministic)
}
func (m *TLSClientConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSClientConfig.Merge(m, src)
}
func (m *TLSClientConfig) XXX_Size() int {
	return xxx_messageInfo_TLSClientConfig.Size(m)
}
func (m *TLSClientConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSClientConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLSClientConfig proto.InternalMessageInfo

func (m *TLSClientConfig) GetInSecure() bool {
	if m != nil {
		return m.InSecure
	}
	return false
}

func (m *TLSClientConfig) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *TLSClientConfig) GetCertData() []byte {
	if m != nil {
		return m.CertData
	}
	return nil
}

func (m *TLSClientConfig) GetKeyData() []byte {
	if m != nil {
		return m.KeyData
	}
	return nil
}

func (m *TLSClientConfig) GetCaData() []byte {
	if m != nil {
		return m.CaData
	}
	return nil
}

func (m *TLSClientConfig) GetNextProtos() []string {
	if m != nil {
		return m.NextProtos
	}
	return nil
}

type UnregisterClusterRequest struct {
	ClusterName          string   `protobuf:"bytes,1,opt,name=clusterName,proto3" json:"clusterName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnregisterClusterRequest) Reset()         { *m = UnregisterClusterRequest{} }
func (m *UnregisterClusterRequest) String() string { return proto.CompactTextString(m) }
func (*UnregisterClusterRequest) ProtoMessage()    {}
func (*UnregisterClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3be2089bb94235a, []int{3}
}

func (m *UnregisterClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterClusterRequest.Unmarshal(m, b)
}
func (m *UnregisterClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterClusterRequest.Marshal(b, m, deterministic)
}
func (m *UnregisterClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterClusterRequest.Merge(m, src)
}
func (m *UnregisterClusterRequest) XXX_Size() int {
	return xxx_messageInfo_UnregisterClusterRequest.Size(m)
}
func (m *UnregisterClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterClusterRequest proto.InternalMessageInfo

func (m *UnregisterClusterRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

type UnregisterClusterResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnregisterClusterResponse) Reset()         { *m = UnregisterClusterResponse{} }
func (m *UnregisterClusterResponse) String() string { return proto.CompactTextString(m) }
func (*UnregisterClusterResponse) ProtoMessage()    {}
func (*UnregisterClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a3be2089bb94235a, []int{4}
}

func (m *UnregisterClusterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterClusterResponse.Unmarshal(m, b)
}
func (m *UnregisterClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterClusterResponse.Marshal(b, m, deterministic)
}
func (m *UnregisterClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterClusterResponse.Merge(m, src)
}
func (m *UnregisterClusterResponse) XXX_Size() int {
	return xxx_messageInfo_UnregisterClusterResponse.Size(m)
}
func (m *UnregisterClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterClusterResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Cluster)(nil), "cluster.Cluster")
	proto.RegisterType((*Config)(nil), "cluster.Config")
	proto.RegisterType((*TLSClientConfig)(nil), "cluster.TLSClientConfig")
	proto.RegisterType((*UnregisterClusterRequest)(nil), "cluster.UnregisterClusterRequest")
	proto.RegisterType((*UnregisterClusterResponse)(nil), "cluster.UnregisterClusterResponse")
}

func init() {
	proto.RegisterFile("pkg/grpc/proto/cluster/cluster.proto", fileDescriptor_a3be2089bb94235a)
}

var fileDescriptor_a3be2089bb94235a = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x5d, 0x58, 0x97, 0x6e, 0x77, 0x88, 0x30, 0x83, 0x90, 0x29, 0x12, 0x0a, 0x16, 0x12, 0x7b,
	0x5a, 0xa5, 0xf1, 0xc0, 0x0b, 0x4f, 0x2b, 0x8f, 0x68, 0x42, 0x6e, 0x79, 0x41, 0x7d, 0x49, 0xdd,
	0x4b, 0x88, 0x1a, 0xec, 0x60, 0x3b, 0x05, 0x7e, 0x11, 0xff, 0x01, 0xfe, 0x1c, 0xb2, 0x9d, 0xaf,
	0xb6, 0xb0, 0xa7, 0xf8, 0x9c, 0x73, 0x7d, 0xcf, 0xfd, 0x88, 0xe1, 0x65, 0xb5, 0xc9, 0xa7, 0xb9,
	0xae, 0xc4, 0xb4, 0xd2, 0xca, 0xaa, 0xa9, 0x28, 0x6b, 0x63, 0x51, 0xb7, 0xdf, 0x2b, 0xcf, 0x92,
	0x71, 0x03, 0xd9, 0x12, 0xc6, 0xb3, 0x70, 0x24, 0x04, 0x46, 0x32, 0xfb, 0x8a, 0x34, 0x4a, 0xa3,
	0xcb, 0x33, 0xee, 0xcf, 0xe4, 0x31, 0x9c, 0x88, 0x52, 0xd5, 0x6b, 0x7a, 0xcf, 0x93, 0x01, 0x90,
	0x57, 0x10, 0x0b, 0x25, 0x3f, 0x17, 0x39, 0x3d, 0x4e, 0xa3, 0xcb, 0xf3, 0xeb, 0xe4, 0xaa, 0xcd,
	0x3e, 0xf3, 0x34, 0x6f, 0x64, 0xf6, 0x3b, 0x82, 0x38, 0x50, 0x2e, 0xfb, 0x17, 0x65, 0x6c, 0x9b,
	0xdd, 0x9d, 0xc9, 0x04, 0x4e, 0x6b, 0x83, 0xda, 0xbb, 0x06, 0x83, 0x0e, 0x3b, 0xad, 0xca, 0x8c,
	0xf9, 0xae, 0xf4, 0xda, 0xbb, 0x9c, 0xf1, 0x0e, 0x93, 0x14, 0xce, 0x57, 0x98, 0x69, 0xd4, 0x0b,
	0xb5, 0x41, 0x49, 0x47, 0x5e, 0x1e, 0x52, 0xe4, 0x06, 0x12, 0x5b, 0x9a, 0x59, 0x59, 0xa0, 0xb4,
	0xa1, 0x00, 0x1a, 0xfb, 0x52, 0x69, 0x57, 0xea, 0xe2, 0xfd, 0x7c, 0xa8, 0xf3, 0xfd, 0x0b, 0xec,
	0x4f, 0x04, 0xc9, 0x5e, 0x90, 0xab, 0xaa, 0x90, 0x73, 0x14, 0xb5, 0x0e, 0x73, 0x3a, 0xe5, 0x1d,
	0x26, 0xcf, 0x01, 0x0c, 0xea, 0x2d, 0xea, 0xdb, 0xbe, 0x9f, 0x01, 0xe3, 0xee, 0x0a, 0xd4, 0xf6,
	0x5d, 0x66, 0x33, 0xdf, 0xd1, 0x7d, 0xde, 0x61, 0x42, 0x61, 0xbc, 0xc1, 0x9f, 0x5e, 0x1a, 0x79,
	0xa9, 0x85, 0xe4, 0x09, 0xc4, 0x22, 0xf3, 0xc2, 0x89, 0x17, 0x1a, 0xe4, 0xdc, 0x24, 0xfe, 0xb0,
	0x1f, 0xdc, 0x3a, 0x0d, 0x8d, 0xd3, 0x63, 0xe7, 0xd6, 0x33, 0xec, 0x2d, 0xd0, 0x8f, 0x52, 0x63,
	0x5e, 0xb8, 0x66, 0x9b, 0x15, 0x73, 0xfc, 0x56, 0xa3, 0xb1, 0x6e, 0x7e, 0xcd, 0x14, 0x6e, 0xfb,
	0x85, 0x0f, 0x29, 0xf6, 0x0c, 0x9e, 0xfe, 0xe3, 0xb6, 0xa9, 0x94, 0x34, 0x78, 0xfd, 0x2b, 0x82,
	0x07, 0x0d, 0x37, 0x47, 0xbd, 0x2d, 0x04, 0x92, 0x37, 0x90, 0xf0, 0xdd, 0x68, 0xf2, 0xb0, 0xff,
	0x29, 0xc2, 0x77, 0x72, 0xc0, 0xb0, 0x23, 0xb2, 0x84, 0x8b, 0x03, 0x23, 0xf2, 0xa2, 0x0b, 0xfc,
	0x5f, 0x0b, 0x13, 0x76, 0x57, 0x48, 0xa8, 0x93, 0x1d, 0xdd, 0x3c, 0xfa, 0x74, 0xe1, 0x9e, 0xc3,
	0xce, 0x4b, 0x58, 0xc5, 0x1e, 0xbe, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x83, 0x88, 0xff,
	0x2a, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterServiceClient interface {
	RegisterCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error)
	UnregisterCluster(ctx context.Context, in *UnregisterClusterRequest, opts ...grpc.CallOption) (*UnregisterClusterResponse, error)
}

type clusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterServiceClient(cc grpc.ClientConnInterface) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) RegisterCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/cluster.ClusterService/RegisterCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) UnregisterCluster(ctx context.Context, in *UnregisterClusterRequest, opts ...grpc.CallOption) (*UnregisterClusterResponse, error) {
	out := new(UnregisterClusterResponse)
	err := c.cc.Invoke(ctx, "/cluster.ClusterService/UnregisterCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
type ClusterServiceServer interface {
	RegisterCluster(context.Context, *Cluster) (*Cluster, error)
	UnregisterCluster(context.Context, *UnregisterClusterRequest) (*UnregisterClusterResponse, error)
}

// UnimplementedClusterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServiceServer struct {
}

func (*UnimplementedClusterServiceServer) RegisterCluster(ctx context.Context, req *Cluster) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCluster not implemented")
}
func (*UnimplementedClusterServiceServer) UnregisterCluster(ctx context.Context, req *UnregisterClusterRequest) (*UnregisterClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterCluster not implemented")
}

func RegisterClusterServiceServer(s *grpc.Server, srv ClusterServiceServer) {
	s.RegisterService(&_ClusterService_serviceDesc, srv)
}

func _ClusterService_RegisterCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).RegisterCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/RegisterCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).RegisterCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_UnregisterCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).UnregisterCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.ClusterService/UnregisterCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).UnregisterCluster(ctx, req.(*UnregisterClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCluster",
			Handler:    _ClusterService_RegisterCluster_Handler,
		},
		{
			MethodName: "UnregisterCluster",
			Handler:    _ClusterService_UnregisterCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/proto/cluster/cluster.proto",
}
